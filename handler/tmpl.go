// Code generated for package handler by go-bindata DO NOT EDIT. (@generated)
// sources:
// web/template/form.html
package handler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webTemplateFormHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xcd\x6e\xdb\x46\x10\xbe\xf3\x29\xa6\x9b\x43\xac\x54\x22\x2d\xc7\x46\x6b\x8a\x12\x90\xa6\x69\x12\x20\x45\x02\x24\x41\x8f\xc5\x92\x3b\x14\x37\x5e\xee\xb2\xbb\x4b\xd9\xaa\x22\xa0\xb7\x22\xc9\xb1\x40\x4f\x3d\xe4\x9a\x3e\x40\x51\xa0\x41\x9f\xc6\x35\xda\xb7\x28\x76\x49\xc9\xb2\x24\x3b\xd2\x45\xdc\xf9\xf9\x66\xe6\xdb\x99\x21\x67\x33\x86\x39\x97\x08\x24\xa5\x06\xc9\x7c\x9e\x7c\xc6\x54\x66\xa7\x15\x42\x61\x4b\x31\x0a\x12\xf7\x07\x82\xca\xf1\x90\xa0\x24\xa3\x20\x48\x0a\xa4\x6c\x14\x00\x24\x96\x5b\x81\xa3\x8b\x5f\x7f\x3e\xff\xeb\x8f\xf3\x8f\xef\xff\xfd\xfb\x97\x24\x6a\x64\x41\x12\x35\x56\x89\xb1\x53\x77\x0e\xb9\xac\x6a\xdb\xcb\xb9\xc0\x5e\xa6\xa4\xa5\x5c\xa2\x86\x59\x00\x50\x29\xc3\x2d\x57\x32\x06\x8d\x82\x5a\x3e\xc1\x41\x00\x70\xca\x99\x2d\x62\x38\xda\xdf\xaf\xce\x06\xc1\x1c\x82\xf0\x95\x81\x55\x10\xab\xf9\x78\x8c\xba\xdb\x28\x4c\x9d\x96\xdc\xf6\x1a\x7d\xab\x72\xe0\x8c\x9b\x4a\xd0\x69\x0c\xa9\x50\xd9\x89\x03\x4e\x95\x66\xa8\x7b\x9a\x32\x5e\x9b\x18\x0e\x8e\x1c\x3e\x40\x45\x19\xe3\x72\x1c\x43\xff\xb0\x3a\x83\xc3\x56\x9a\xd2\xec\x64\xac\x55\x2d\x59\x0c\xb7\xee\x1e\x7f\x7d\xf0\xd5\xa1\x13\x67\x4a\x28\x1d\xc3\xad\x3c\xcf\xdd\x31\x57\xd2\xf6\x0c\xff\x11\x63\xe8\x63\xe9\x24\x56\x53\xb9\xa8\x8a\x0a\x01\xe1\xa1\xf1\x7e\xb5\x36\xce\xb1\x52\x5c\x5a\xd4\x83\x60\xbe\x5e\xd6\x1a\x23\x34\x35\x4a\xd4\xd6\x33\x62\x55\x15\xc3\xfe\x00\x04\xe6\xd6\x3d\x6c\x90\x04\xa0\x2a\x9a\x71\x3b\x6d\xb5\x57\x4b\xda\xdf\x2d\x81\xb8\x50\x13\xd4\xf0\xf9\x0d\x5c\x6f\x33\xde\xc6\xff\xa6\x79\xae\xb2\xda\xec\x8a\xbd\x34\xde\x09\x7b\xa1\x68\x52\xba\xa1\x2b\x3e\x6d\xe0\x03\x5f\x1f\xa0\xc9\x6b\xb6\xd1\x1d\x87\x87\xc7\x47\x0f\x56\xbb\x63\xd1\x2f\xf3\x20\x08\x3d\x82\x46\x5b\x6b\xe9\x5d\x4b\xaa\xc7\x5c\xfa\x8b\x9a\x5f\xd1\xc6\x52\xd9\xbd\x18\xcb\xca\x4e\x3b\x57\x2c\xfb\x58\xb6\xd6\x2e\xaf\x75\xbc\xa6\x05\xdd\xa8\xc5\xc0\x2d\x15\x3c\x5b\x6b\xcc\xf0\xb8\xe9\x4c\x2f\x3a\x45\x3e\x2e\x6c\x0c\xa9\x12\x6c\x1b\xe4\x6a\x12\x71\x8a\xb9\xd2\x4d\x63\xba\xc1\x45\x69\x63\x20\xff\xfd\xf4\xe6\xe2\xdd\x87\x66\xf2\x63\x32\x58\xcb\x40\x2a\x5d\x52\xb1\x11\x6e\x21\x9e\x07\x41\x74\x07\x5e\x1a\x14\x68\x0c\x78\x1f\xd3\x85\x57\xb5\xb1\x90\x2b\x0d\x0c\x4b\xd5\x4a\xe1\x4e\x14\x04\xa9\x62\xd3\xcb\x22\x73\x5a\x72\x31\x8d\x81\x3c\xad\x50\x82\xa1\xd2\x90\x2e\x90\xe7\x38\x56\x08\x2f\x1f\x5f\x3e\x7f\xf7\x8c\x74\xe1\x11\x8a\x09\x5a\x9e\xd1\x2e\xdc\xd3\x9c\x8a\xae\x77\xe8\x19\xd4\x3c\x5f\xbd\xaa\x2f\xbe\xf9\xf2\xfe\xf1\xbd\x8d\x89\xcf\xf2\xfc\x28\x3f\x72\x09\x17\xfd\x2e\x14\x07\x2b\x17\xd2\x4b\x95\xb5\xaa\x8c\xa1\xdd\x14\x5b\x0b\x05\xb0\x78\x66\x7b\x54\xf0\xb1\x8c\x21\xc3\x66\xe6\x16\x61\x6f\x51\x4a\x3d\x19\xb9\xd2\xa5\x87\x5e\x9f\xe7\x65\x97\x00\xad\xad\x5a\xc3\x5b\xc0\xcd\x83\x24\x6a\x97\x6c\xe2\xa8\xf2\x9b\x99\xf1\x09\x64\x82\x1a\x33\x24\xcb\x6d\x4b\x9c\x06\x20\x29\xfa\x57\x56\xf6\x3f\x6f\x3f\x5c\xbc\x79\x97\x44\x45\xbf\xd1\x37\x46\x3e\x27\x9a\xb9\x35\x34\x24\x51\x5d\x09\x45\x19\x81\x12\x6d\xa1\xd8\x90\x3c\x7b\xfa\xfc\x05\x01\x94\xfe\x45\x31\x24\x65\x2d\x2c\xaf\xa8\xb6\x91\x73\xeb\x31\x6a\x69\x1b\xec\x6a\x2a\xdb\xde\x01\x64\xd4\x86\xf4\xc6\xde\x62\xd3\x9c\x00\x67\x43\x52\x4e\xdb\x43\x13\xb5\x79\x96\xb4\x5c\x3c\x8f\x2e\x71\x04\x4d\x51\x80\xa5\x29\x97\x0c\xcf\x86\x64\x9f\xb8\xd6\x5a\x81\xd8\xcc\xa8\x9d\x6f\x32\x5a\xed\xed\x24\xf2\x48\xcb\x62\x22\xc6\x27\xcb\x43\xb5\x40\x59\x19\x1d\x32\xba\xf8\xed\xf7\xab\x08\xd5\xee\x54\xec\x4e\x44\xb3\xb9\x16\x54\xb4\xa7\xdd\x08\x58\xb8\xb6\xe0\xdb\x76\x20\x19\x9d\xff\xf9\xf6\xfc\xe3\xfb\x4f\x91\x90\xf8\x0b\x5f\xf6\x4d\xab\x49\xa2\xa6\x0f\x13\x93\x69\x5e\x59\xa7\x8e\x22\x28\xac\xad\x4c\x1c\x45\x99\x62\x58\xa1\x0c\xb9\x8a\x1e\xa2\xca\x73\x8d\xd3\xfb\x5a\xe5\x16\xa3\x0a\x65\xf4\x28\x3d\xcd\x1e\x06\x4c\x65\x75\x89\xd2\x86\x3f\xd4\xa8\xa7\xcf\x51\x60\x66\x95\xde\x23\xee\x5b\x84\x74\x42\x9f\xf9\x13\x6e\x6c\x48\x19\xdb\xbb\xfd\xca\xdc\xee\x0c\x82\x60\x42\x35\x38\x8e\x1e\x7b\xea\x60\x08\xd7\xa0\x00\x09\x57\x09\xed\x74\xdb\x06\x4c\x6b\x6b\x95\xf4\x25\xee\xe6\xbb\x64\x0b\x3a\x5d\x8f\x60\x0b\xfc\xbe\x5d\xca\xd7\x22\x90\xd5\x45\x4b\x3a\x83\x96\xd4\xa0\x89\xee\x0a\x7a\x30\x41\x69\x5d\x75\x28\xd1\x45\x3c\xc1\x29\x53\xa7\x92\x74\x21\xaf\xa5\x9f\xc8\x3d\x40\x67\x03\x1d\x98\xb5\xb9\xf3\x1c\x5a\x61\x78\x82\xd3\xfb\x8a\x21\x0c\x87\xd0\xbf\x0b\xaf\x5f\x6f\x8a\xef\x1e\xac\x78\xba\xdf\x92\xb5\xd0\xbf\xdc\xf6\x3a\x83\x56\x39\x07\x08\xe6\x9d\xc1\x0d\xc9\x65\x82\x67\x27\xdb\x53\x0b\xb6\x22\x3b\x69\xcb\x51\x4e\x85\xc1\x81\x0b\x00\x10\x5c\x5a\x6e\x8b\x52\x50\x39\xc6\x6b\x18\x58\xa3\x3e\xe4\x52\xa2\x7e\xf4\xe2\xdb\x27\x30\x04\x5b\x70\x13\x4e\xa8\xa8\x71\xd0\x94\x02\xe0\xd6\x65\xdb\x97\xee\x2b\xd5\x7d\xe4\xce\x66\x28\xd9\x7c\xfe\x7f\x00\x00\x00\xff\xff\x26\xf9\x76\xd2\x0c\x0b\x00\x00")

func webTemplateFormHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webTemplateFormHtml,
		"web/template/form.html",
	)
}

func webTemplateFormHtml() (*asset, error) {
	bytes, err := webTemplateFormHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/template/form.html", size: 2828, mode: os.FileMode(420), modTime: time.Unix(1593092424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/template/form.html": webTemplateFormHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"web": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"form.html": &bintree{webTemplateFormHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
